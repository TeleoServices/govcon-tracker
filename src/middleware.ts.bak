import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { jwtVerify } from 'jose'

const JWT_SECRET = new TextEncoder().encode(
  process.env.JWT_SECRET || 'teleo-services-secret-key-change-in-production'
)

// Routes that don't require authentication
const publicRoutes = ['/login', '/api/auth/login']

// Routes that require admin role
const adminRoutes = ['/admin', '/api/users']

export async function middleware(request: NextRequest) {
  // Temporarily disable authentication - allow all requests
  return NextResponse.next()
  
  /* AUTHENTICATION DISABLED FOR DEVELOPMENT
  const path = request.nextUrl.pathname

  // Allow public routes
  if (publicRoutes.some(route => path.startsWith(route))) {
    return NextResponse.next()
  }

  // Check for auth token
  const token = request.cookies.get('auth-token')?.value

  if (!token) {
    // Redirect to login if no token
    if (path.startsWith('/api/')) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }
    return NextResponse.redirect(new URL('/login', request.url))
  }

  try {
    // Verify token
    const { payload } = await jwtVerify(token, JWT_SECRET)
    const user = payload as { id: string; email: string; role: string }

    // Check admin routes
    if (adminRoutes.some(route => path.startsWith(route))) {
      if (user.role !== 'ADMIN') {
        if (path.startsWith('/api/')) {
          return NextResponse.json({ error: 'Admin access required' }, { status: 403 })
        }
        return NextResponse.redirect(new URL('/', request.url))
      }
    }

    // Add user to headers for API routes
    if (path.startsWith('/api/')) {
      const requestHeaders = new Headers(request.headers)
      requestHeaders.set('x-user-id', user.id)
      requestHeaders.set('x-user-email', user.email)
      requestHeaders.set('x-user-role', user.role)
      
      return NextResponse.next({
        request: {
          headers: requestHeaders,
        },
      })
    }

    return NextResponse.next()
  } catch (error) {
    // Invalid token
    if (path.startsWith('/api/')) {
      return NextResponse.json({ error: 'Invalid token' }, { status: 401 })
    }
    return NextResponse.redirect(new URL('/login', request.url))
  }
  */
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     * - .svg, .png, .jpg, .jpeg, .gif, .webp files
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}